{"version":3,"sources":["Components/Books.tsx","Components/Myorders.tsx","Components/Cart.tsx","actions/removeFromCart.tsx","actions/placeOrder.tsx","Components/Book.tsx","actions/addToCart.tsx","App.tsx","reducers/rootReducer.tsx","sagas/addToCart.tsx","sagas/getBooks.tsx","sagas/removeFromCart.tsx","sagas/placeOrder.tsx","serviceWorker.ts","index.tsx"],"names":["Books","this","props","BookList","length","map","book","className","key","id","title","subtitle","src","to","Component","connect","state","Myorders","orders","OrderDetail","Order","order","isbn","price","Cart","handleDelete","removeFromCart","placeOrder","formVal","document","querySelectorAll","orderDetail","formError","forEach","val","value","name","style","borderColor","prp","history","push","totalPrice","CartBooks","onClick","type","placeholder","dispatch","orderDeatils","Book","handleClick","flag","addToCart","author","description","pages","ownProps","match","params","bookid","find","App","axios","get","then","res","loadBooks","data","exact","path","component","initState","rootReducer","action","cartList","filter","itm","updateCart","watchCart","put","takeEvery","updateBooks","watchBooks","watchCartItemRemoval","updateOrder","watchOrders","Boolean","window","location","hostname","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a1fdebb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n  \r\n\r\nclass Books extends Component{\r\n\r\n    render(){\r\n        const { Books }:any = this.props;\r\n\r\n        const BookList = Books.length ? Books.map((book:any) => {\r\n        return (<div className='bookTile' key={book.id}><h4>{book.title}</h4><h5>{book.subtitle}</h5><div className='imgContainer'><img className='bookImage' src='https://dictionary.cambridge.org/images/thumb/book_noun_001_01679.jpg'/></div><Link to={'/MyBookstore/book/'+ book.id}><div className='buyButton'><h4>Buy</h4></div></Link></div>)\r\n        }) : (<div><img className='loadingIcon' src='https://media1.giphy.com/media/3oEjI6SIIHBdRxXI40/200.gif'/></div>);\r\n\r\n        return(\r\n            <div className='BodyContainerMain'>\r\n                <div className='BodyContainer'>\r\n                    {BookList}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n    const mapStateToProps = (state:any) =>{\r\n        return{\r\n            Books : state.Books\r\n        }\r\n    }\r\n\r\nexport default connect(mapStateToProps)(Books);","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nclass Myorders extends Component {\r\n\r\n    render(){\r\n        let {OrderDetail}:any = this.props;\r\n\r\n        const orders = OrderDetail.Order.map((order:any)=>{\r\n        return (<div key={order.id} className='cartItem'><h2>{order.title}</h2><span>ISBN : {order.isbn}</span><span className='priceTag'>Price : {order.price}</span>\r\n            </div>);\r\n        })\r\n\r\n        return(\r\n            <div className='BodyContainerMain'>\r\n                <p>Myorders</p>\r\n                {orders}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:any) =>{\r\n    return{\r\n        OrderDetail : state.OrderDetail,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Myorders);","import React, { Component, Fragment } from 'react';\r\n// import { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport {removeFromCart} from '../actions/removeFromCart';\r\nimport {placeOrder} from '../actions/placeOrder';\r\n\r\n  \r\n\r\nclass Cart extends Component{\r\n\r\n    handleDelete = (id:any) => {\r\n        let prp:any = this.props\r\n        prp.removeFromCart(id);\r\n    }\r\n\r\n    placeOrder = () => {\r\n        let formVal = document.querySelectorAll('.formVal');\r\n        let orderDetail:any = {};\r\n        let formError = 0;\r\n        formVal.forEach((val:any)=>{\r\n            if(val.value !== ''){\r\n                orderDetail[val.name] = val.value;\r\n                val.style.borderColor = '#B0CFE0';\r\n            }\r\n            else{\r\n                val.style.borderColor = 'red';\r\n                formError += 1;\r\n            }            \r\n        })\r\n        let { Cart }:any = this.props;\r\n        orderDetail.Order = Cart;\r\n\r\n        if(orderDetail.Order && orderDetail.Order.length > 0 && formError == 0){\r\n            //Success\r\n            let prp:any = this.props;\r\n            prp.placeOrder(orderDetail);\r\n            prp.history.push('/MyBookstore/myorders/');\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { Cart }:any = this.props;\r\n        let totalPrice = 0;\r\n        let CartBooks = Cart.length ? Cart.map((book:any)=>{\r\n            totalPrice+=book.price;\r\n            return (<div key={book.id} className='cartItem'><span className='removeFCart' onClick={()=>{this.handleDelete(book.id)}}>Remove</span><h2>{book.title}</h2><span>ISBN : {book.isbn}</span><span className='priceTag'>Price : {book.price}</span>\r\n            </div>)\r\n        }) : (<div><h1>Your cart is empty!!</h1></div>);\r\n\r\n        \r\n\r\n        return(\r\n            <div className='BodyContainerMain'>\r\n                    {CartBooks}\r\n                    <div className='totalPrice'><h3>The total ammount is : {totalPrice}</h3></div>\r\n                    <div className='addressForm'>\r\n                    <form className=\"form-style-9\">\r\n                        <ul>\r\n                            <li>\r\n                                <input type=\"text\" name=\"Name \" className=\"field-style field-split align-left formVal\" placeholder=\"Name\" />\r\n                                <input type=\"email\" name=\"Email\" className=\"field-style field-split align-right formVal\" placeholder=\"Email\" />\r\n\r\n                            </li>\r\n                            <li>\r\n                                <input type=\"text\" name=\"Phone\" className=\"field-style field-split align-left formVal\" placeholder=\"Phone\" />\r\n                                <input type=\"text\" name=\"Landmark\" className=\"field-style field-split align-right formVal\" placeholder=\"Landmark\" />\r\n                            </li>\r\n                            <li>\r\n                            <textarea name=\"Address\" className=\"field-style formVal\" placeholder=\"Address\"></textarea>\r\n                            </li>\r\n                            <li>\r\n                                <input type=\"button\" onClick={this.placeOrder} value=\"Place order\"/>\r\n                            </li>\r\n                        </ul>\r\n                    </form>\r\n                    </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n    const mapStateToProps = (state:any) =>{\r\n        return{\r\n            Cart : state.Cart,\r\n        }\r\n    }\r\n    \r\n    const mapDispatchToProps = (dispatch:any) => {\r\n        return {\r\n            removeFromCart : (id:any) => {\r\n                dispatch(removeFromCart(id))\r\n            },\r\n            placeOrder: (orderDeatils:any) => {\r\n                dispatch(placeOrder(orderDeatils))\r\n            }\r\n        }\r\n    }\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);","export const removeFromCart = (id:any) => {\r\n    return {\r\n        type: 'REMOVE_FROM_CART',\r\n        id: id\r\n    }\r\n}","export const placeOrder = (orderDeatils:any) => {\r\n    return {\r\n        type: 'SUBMIT_ORDER',\r\n        orderDeatils: orderDeatils\r\n    }\r\n}","import React, {Component} from 'react';\r\n// import axios from 'axios';\r\nimport {connect} from 'react-redux';\r\nimport {addToCart} from '../actions/addToCart';\r\n\r\nclass Book extends Component{\r\n\r\n    handleClick = (flag:any) => {\r\n        let prp:any = this.props\r\n        prp.addToCart(prp.Book);\r\n        if(flag=='Now'){\r\n            prp.history.push('/MyBookstore/cart');\r\n        }\r\n        else{\r\n            prp.history.push('/MyBookstore/');\r\n        }\r\n        \r\n    }\r\n\r\n    render(){\r\n\r\n        const { Book }:any = this.props;\r\n        \r\n\r\n        return(\r\n            <div className='BodyContainerMain'>\r\n                    <div key={Book.id}>\r\n                    <h2>{Book.title}</h2>\r\n                    <h3>{Book.subtitle}</h3>\r\n                    <img className='bookDtl' src='https://dictionary.cambridge.org/images/thumb/book_noun_001_01679.jpg'></img>\r\n                    <div className='fltLeft'>\r\n                        <h4>Author : {Book.author}</h4>\r\n                        <p><strong>Description : </strong>{Book.description}</p>\r\n                        <p><strong>Pages : </strong>{Book.pages}</p>\r\n                        <p><strong>ISBN : </strong>{Book.isbn}</p>\r\n                        <p><strong>Price : </strong>{Book.price}</p>\r\n                    </div>\r\n                    <div className='addtocart' onClick={()=>{this.handleClick('Now')}}>Buy now</div>\r\n                    <div className='addtocart' onClick={this.handleClick}>Add to cart</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:any, ownProps:any) =>{\r\n    let id:any = ownProps.match.params.bookid;\r\n\r\n    return{\r\n        Book: state.Books.find( (book:any) => book.id == id)\r\n    }\r\n\r\n    \r\n}\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        addToCart : (id:any) => {\r\n            dispatch(addToCart(id))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Book);","export const addToCart = (id:any) => {\r\n    return {\r\n        type: 'ADD_TO_CART',\r\n        id: id\r\n    }\r\n}\r\n\r\n\r\n// export const GET_BOOKS_PENDING = 'GET_BOOKS_PENDING';\r\n// export const GET_BOOKS_SUCCESS = 'GET_BOOKS_SUCCESS';\r\n// export const GET_BOOKS_ERROR = 'GET_BOOKS_ERROR';\r\n// export const ADD_TO_CART = 'ADD_TO_CART';\r\n\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Books from './Components/Books';\nimport Myorders from './Components/Myorders';\nimport Cart from './Components/Cart';\nimport Book from './Components/Book';\nimport { BrowserRouter, Route, NavLink } from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport axios from 'axios';\n\n\nclass App extends Component {\n\n  componentDidMount(){\n    let prp:any = this.props;\n    axios.get('https://my-json-server.typicode.com/arkapravabanerjee/demo/books').then(\n        res => {\n          prp.loadBooks(res.data);\n        }\n    )\n  }\n\n  render(){\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <div className='Header'>\n          <h2 className='Title'>My Book-store</h2>\n          <ul className=\"Nav\">\n            <li>\n              <NavLink exact to='/MyBookstore/'>Home</NavLink>\n            </li>\n            <li>\n            <NavLink to='/MyBookstore/myorders'>My orders</NavLink>\n            </li>\n            <li>\n            <NavLink to='/MyBookstore/cart'>Cart</NavLink>\n            </li>\n          </ul>\n          </div>\n          <Route exact path='/MyBookstore/' component={Books}/>\n          <Route path='/MyBookstore/myorders' component={Myorders}/>\n          <Route path='/MyBookstore/cart' component={Cart}/>\n          <Route path='/MyBookstore/book/:bookid' component={Book} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nconst mapStateToProps = (state:any) =>{\n  return{\n      Book: state.Books\n  }\n}\n\nconst mapDispatchToProps = (dispatch:any) => {\n  return {\n      loadBooks : (data:any) => {\n          dispatch({type:'GET_BOOK', data:data})\n      }\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const initState = {\r\n    Cart : [],\r\n    Books:[],\r\n    OrderDetail: null\r\n}\r\n\r\n\r\nconst rootReducer = (state:any = initState, action:any) => {\r\n  if(action.type == 'GET_BOOK_ASYNC'){\r\n    return {\r\n      ...state,\r\n      Books: action.data\r\n    }\r\n  }\r\n\r\n  else if(action.type == 'UPDATE_CART'){\r\n    let cartList = state.Cart.filter((itm:any) => {\r\n      return action.book.id != itm.id\r\n    });\r\n    cartList.push(action.book);\r\n    \r\n    return {\r\n      ...state,\r\n      Cart : cartList\r\n    }\r\n  }\r\n  else if(action.type == 'REMOVE_ITEM'){\r\n    let cartList = state.Cart.filter((itm:any) => {\r\n      return action.id !== itm.id\r\n    });\r\n\r\n    return {\r\n      ...state,\r\n      Cart : cartList\r\n    }\r\n  }\r\n\r\n  else if(action.type == 'PLACE_ORDER'){\r\n    state.Cart = []\r\n    if (state.OrderDetail){\r\n      action.orderDeatils.Order.forEach((itm:any)=>{\r\n        state.OrderDetail.Order.push(itm);\r\n      })\r\n      \r\n    }\r\n    else{\r\n      return{\r\n        ...state,\r\n        OrderDetail: action.orderDeatils\r\n      }\r\n    }\r\n  }\r\n  \r\n  return state;\r\n}\r\n\r\nexport default rootReducer;","import {takeEvery, put, call, fork} from 'redux-saga/effects';\r\n\r\n\r\nfunction* updateCart(action:any){\r\n    yield put({type: 'UPDATE_CART', book:action.id})\r\n}\r\n\r\n\r\nexport function* watchCart(){\r\n    yield takeEvery('ADD_TO_CART', updateCart)\r\n}\r\n\r\n","import {takeEvery, put, call, fork} from 'redux-saga/effects';\r\n\r\n\r\nfunction* updateBooks(action:any){\r\n    yield put({type: 'GET_BOOK_ASYNC', data:action.data})\r\n}\r\n\r\n\r\nexport function* watchBooks(){\r\n    yield takeEvery('GET_BOOK', updateBooks)\r\n}","import {takeEvery, put} from 'redux-saga/effects';\r\n\r\n\r\nfunction* removeFromCart(action:any){\r\n    yield put({type: 'REMOVE_ITEM', id:action.id})\r\n}\r\n\r\n\r\nexport function* watchCartItemRemoval(){\r\n    yield takeEvery('REMOVE_FROM_CART', removeFromCart)\r\n}","import {takeEvery, put, call, fork} from 'redux-saga/effects';\r\n\r\n\r\nfunction* updateOrder(action:any){\r\n    yield put({type: 'PLACE_ORDER', orderDeatils:action.orderDeatils})\r\n}\r\n\r\n\r\nexport function* watchOrders(){\r\n    yield takeEvery('SUBMIT_ORDER', updateOrder)\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\nimport createSagaMiddleware from 'redux-saga';\nimport { watchCart } from './sagas/addToCart';\nimport {watchBooks} from './sagas/getBooks';\nimport {watchCartItemRemoval} from './sagas/removeFromCart'\nimport {watchOrders} from './sagas/placeOrder';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(watchBooks);\nsagaMiddleware.run(watchCart);\nsagaMiddleware.run(watchCartItemRemoval);\nsagaMiddleware.run(watchOrders);\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}