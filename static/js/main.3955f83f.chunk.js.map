{"version":3,"sources":["Components/Books.tsx","Components/Myorders.tsx","Components/Cart.tsx","Components/Book.tsx","actions/addToCart.tsx","App.tsx","reducers/rootReducer.tsx","sagas/addToCart.tsx","sagas/getBooks.tsx","serviceWorker.ts","index.tsx"],"names":["Books","this","props","BookList","length","map","book","className","key","isbn","title","subtitle","src","to","Component","connect","state","Myorders","Cart","CartBooks","price","Book","handleClick","prp","addToCart","history","push","author","description","pages","onClick","ownProps","id","match","params","bookid","find","dispatch","type","App","axios","get","then","res","loadBooks","data","exact","path","component","initState","rootReducer","action","cartList","filter","itm","updateCart","watchCart","put","takeEvery","updateBooks","watchBooks","Boolean","window","location","hostname","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3955f83f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n  \r\n\r\nclass Books extends Component{\r\n\r\n    render(){\r\n        const { Books }:any = this.props;\r\n\r\n        const BookList = Books.length ? Books.map((book:any) => {\r\n        return (<div className='bookTile' key={book.isbn}><h4>{book.title}</h4><h5>{book.subtitle}</h5><div className='imgContainer'><img className='bookImage' src='https://dictionary.cambridge.org/images/thumb/book_noun_001_01679.jpg'/></div><Link to={'/book/'+ book.isbn}><div className='buyButton'><h4>Buy</h4></div></Link></div>)\r\n        }) : (<div><img className='loadingIcon' src='https://media1.giphy.com/media/3oEjI6SIIHBdRxXI40/200.gif'/></div>);\r\n\r\n        return(\r\n            <div className='BodyContainerMain'>\r\n                <div className='BodyContainer'>\r\n                    {BookList}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n    const mapStateToProps = (state:any) =>{\r\n        return{\r\n            Books : state.Books\r\n        }\r\n    }\r\n\r\nexport default connect(mapStateToProps)(Books);","import React, { Component } from 'react';\r\n\r\nclass Myorders extends Component {\r\n    render(){\r\n        return(\r\n            <div className='BodyContainerMain'>\r\n                <p>Myorders</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Myorders;","import React, { Component } from 'react';\r\n// import { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n  \r\n\r\nclass Cart extends Component{\r\n\r\n    render(){\r\n        const { Cart }:any = this.props;\r\n        \r\n        let CartBooks = Cart.length ? Cart.map((book:any)=>{\r\n            return (<div className='cartItem'><h2>{book.title}</h2><span>ISBN : {book.isbn}</span><span className='priceTag'>Price : {book.price}</span>\r\n            </div>)\r\n        }) : (<div><h1>Your cart is empty!!</h1></div>);\r\n\r\n        return(\r\n            <div className='BodyContainerMain'>\r\n                    {CartBooks}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n    const mapStateToProps = (state:any) =>{\r\n        return{\r\n            Cart : state.Cart,\r\n        }\r\n    }\r\n\r\nexport default connect(mapStateToProps)(Cart);","import React, {Component} from 'react';\r\n// import axios from 'axios';\r\nimport {connect} from 'react-redux';\r\nimport {addToCart} from '../actions/addToCart';\r\n\r\nclass Book extends Component{\r\n\r\n    // state:any = {\r\n    //     id: null,\r\n    //     Book: []\r\n    // }\r\n\r\n    // componentDidMount(){\r\n    //     let prps:any = this.props;\r\n    //     console.log(prps);\r\n    //     let id = prps.match.params.bookid;\r\n    //     this.setState({id: id})\r\n\r\n    //     axios.get('https://my-json-server.typicode.com/arkapravabanerjee/demo/books').then(\r\n    //         res => {\r\n    //             let allBooks = res.data;\r\n    //             let itmDtl = allBooks.filter((book:any) => {\r\n    //                 if(book.isbn === this.state.id){\r\n    //                     return book;\r\n    //                 }\r\n    //             })\r\n\r\n    //             this.setState({Book: itmDtl})\r\n    //         }\r\n    //     )\r\n    // }\r\n\r\n    handleClick = () => {\r\n        let prp:any = this.props\r\n        prp.addToCart(prp.Book);\r\n        prp.history.push('/');\r\n    }\r\n\r\n    render(){\r\n\r\n        const { Book }:any = this.props;\r\n\r\n        return(\r\n            <div className='BodyContainerMain'>\r\n                    <div key={Book.isbn}>\r\n                    <h2>{Book.title}</h2>\r\n                    <h3>{Book.subtitle}</h3>\r\n                    <img className='bookDtl' src='https://dictionary.cambridge.org/images/thumb/book_noun_001_01679.jpg'></img>\r\n                    <div className='fltLeft'>\r\n                        <h4>Author : {Book.author}</h4>\r\n                        <p><strong>Description : </strong>{Book.description}</p>\r\n                        <p><strong>Pages : </strong>{Book.pages}</p>\r\n                        <p><strong>ISBN : </strong>{Book.isbn}</p>\r\n                        <p><strong>Price : </strong>{Book.price}</p>\r\n                    </div>\r\n                    <div className='addtocart' onClick={this.handleClick}>Add to cart</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:any, ownProps:any) =>{\r\n    let id:any = ownProps.match.params.bookid;\r\n    \r\n    return{\r\n        Book: state.Books.find( (book:any) => book.isbn === id)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        addToCart : (id:any) => {\r\n            dispatch(addToCart(id))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Book);","export const addToCart = (id:any) => {\r\n    return {\r\n        type: 'ADD_TO_CART',\r\n        id: id\r\n    }\r\n}\r\n\r\n// export const GET_BOOKS_PENDING = 'GET_BOOKS_PENDING';\r\n// export const GET_BOOKS_SUCCESS = 'GET_BOOKS_SUCCESS';\r\n// export const GET_BOOKS_ERROR = 'GET_BOOKS_ERROR';\r\n// export const ADD_TO_CART = 'ADD_TO_CART';\r\n\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Books from './Components/Books';\nimport Myorders from './Components/Myorders';\nimport Cart from './Components/Cart';\nimport Book from './Components/Book';\nimport { BrowserRouter, Route, NavLink } from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport axios from 'axios';\n\n\nclass App extends Component {\n\n  componentDidMount(){\n    let prp:any = this.props;\n    axios.get('https://my-json-server.typicode.com/arkapravabanerjee/demo/books').then(\n        res => {\n          prp.loadBooks(res.data);\n        }\n    )\n  }\n\n  render(){\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <div className='Header'>\n          <h2 className='Title'>My Book-store</h2>\n          <ul className=\"Nav\">\n            <li>\n              <NavLink exact to='/'>Home</NavLink>\n            </li>\n            <li>\n            <NavLink to='/myorders'>My orders</NavLink>\n            </li>\n            <li>\n            <NavLink to='/cart'>Cart</NavLink>\n            </li>\n          </ul>\n          </div>\n          <Route exact path='/' component={Books}/>\n          <Route path='/myorders' component={Myorders}/>\n          <Route path='/cart' component={Cart}/>\n          <Route path='/book/:bookid' component={Book} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nconst mapStateToProps = (state:any) =>{\n  return{\n      Book: state.Books\n  }\n}\n\nconst mapDispatchToProps = (dispatch:any) => {\n  return {\n      loadBooks : (data:any) => {\n          dispatch({type:'GET_BOOK', data:data})\n      }\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const initState = {\r\n    Cart : [],\r\n    Books:[]\r\n}\r\n\r\n\r\nconst rootReducer = (state:any = initState, action:any) => {\r\n  if(action.type == 'GET_BOOK_ASYNC'){\r\n    return {\r\n      ...state,\r\n      Books: action.data\r\n    }\r\n  }\r\n\r\n  if(action.type == 'UPDATE_CART'){\r\n    let cartList = state.Cart.filter((itm:any) => {\r\n      return action.id.isbn !== itm.isbn\r\n    });\r\n    cartList.push(action.id);\r\n    return {\r\n      ...state,\r\n      Cart : cartList\r\n    }\r\n  }\r\n  \r\n  return state;\r\n}\r\n\r\nexport default rootReducer;","import {takeEvery, put, call, fork} from 'redux-saga/effects';\r\n\r\n\r\nfunction* updateCart(action:any){\r\n    yield put({type: 'UPDATE_CART', id:action.id})\r\n}\r\n\r\n\r\nexport function* watchCart(){\r\n    yield takeEvery('ADD_TO_CART', updateCart)\r\n}\r\n\r\n","import {takeEvery, put, call, fork} from 'redux-saga/effects';\r\n\r\n\r\nfunction* updateBooks(action:any){\r\n    yield put({type: 'GET_BOOK_ASYNC', data:action.data})\r\n}\r\n\r\n\r\nexport function* watchBooks(){\r\n    yield takeEvery('GET_BOOK', updateBooks)\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\nimport createSagaMiddleware from 'redux-saga';\nimport { watchCart } from './sagas/addToCart';\nimport {watchBooks} from './sagas/getBooks';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(watchBooks);\nsagaMiddleware.run(watchCart);\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}